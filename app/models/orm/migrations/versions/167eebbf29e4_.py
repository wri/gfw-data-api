"""Create base model.

Revision ID: 0e0383a1d754
Revises:
Create Date: 2021-01-29 17:01:12.251473
"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "167eebbf29e4"  # pragma: allowlist secret
down_revision = "e47ec2fc3c51"  # pragma: allowlist secret
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "datasets",
        sa.Column("dataset", sa.String(), nullable=False),
        sa.Column(
            "metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            server_default=sa.text("'{}'"),
        ),
        sa.Column(
            "created_on", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "updated_on", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.PrimaryKeyConstraint("dataset"),
    )
    op.create_table(
        "geostore",
        sa.Column("gfw_geostore_id", postgresql.UUID(), nullable=False),
        sa.Column("gfw_geojson", sa.TEXT(), nullable=True),
        sa.Column("gfw_area__ha", sa.Numeric(), nullable=True),
        sa.Column("gfw_bbox", postgresql.ARRAY(sa.Numeric()), nullable=True),
        sa.Column(
            "created_on", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "updated_on", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.PrimaryKeyConstraint("gfw_geostore_id"),
    )
    op.create_index(
        "geostore_gfw_geostore_id_idx",
        "geostore",
        ["gfw_geostore_id"],
        unique=False,
        postgresql_using="hash",
    )
    op.create_table(
        "userareas",
        sa.Column("gfw_geostore_id", postgresql.UUID(), nullable=False),
        sa.Column("gfw_geojson", sa.TEXT(), nullable=True),
        sa.Column("gfw_area__ha", sa.Numeric(), nullable=True),
        sa.Column("gfw_bbox", postgresql.ARRAY(sa.Numeric()), nullable=True),
        sa.Column(
            "created_on", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "updated_on", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.PrimaryKeyConstraint("gfw_geostore_id"),
    )
    op.create_index(
        "userarea_gfw_geostore_id_idx",
        "userareas",
        ["gfw_geostore_id"],
        unique=False,
        postgresql_using="hash",
    )
    op.create_table(
        "versions",
        sa.Column("dataset", sa.String(), nullable=False),
        sa.Column("version", sa.String(), nullable=False),
        sa.Column(
            "is_latest", sa.Boolean(), nullable=False, server_default=sa.text("false")
        ),
        sa.Column(
            "is_mutable", sa.Boolean(), nullable=False, server_default=sa.text("false")
        ),
        sa.Column(
            "status", sa.String(), nullable=False, server_default=sa.text("'pending'")
        ),
        sa.Column(
            "metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            server_default=sa.text("'{}'"),
        ),
        sa.Column(
            "change_log",
            postgresql.ARRAY(postgresql.JSONB(astext_type=sa.Text())),
            nullable=True,
            server_default=sa.text("array[]::jsonb[]"),
        ),
        sa.Column(
            "created_on", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "updated_on", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["dataset"],
            ["datasets.dataset"],
            name="fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("dataset", "version"),
    )
    op.create_table(
        "assets",
        sa.Column(
            "asset_id",
            postgresql.UUID(),
            nullable=False,
            server_default=sa.text("uuid_generate_v4()"),
        ),
        sa.Column("dataset", sa.String(), nullable=False),
        sa.Column("version", sa.String(), nullable=False),
        sa.Column("asset_type", sa.String(), nullable=False),
        sa.Column("asset_uri", sa.String(), nullable=False),
        sa.Column(
            "status", sa.String(), nullable=False, server_default=sa.text("'pending'")
        ),
        sa.Column(
            "is_managed", sa.Boolean(), nullable=False, server_default=sa.text("true")
        ),
        sa.Column(
            "is_default", sa.Boolean(), nullable=False, server_default=sa.text("false")
        ),
        sa.Column(
            "creation_options",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
            server_default=sa.text("'{}'"),
        ),
        sa.Column(
            "metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
            server_default=sa.text("'{}'"),
        ),
        sa.Column(
            "fields",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
            server_default=sa.text("'[]'"),
        ),
        sa.Column("extent", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("stats", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "change_log",
            postgresql.ARRAY(postgresql.JSONB(astext_type=sa.Text())),
            nullable=False,
            server_default=sa.text("array[]::jsonb[]"),
        ),
        sa.Column(
            "created_on", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "updated_on", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["dataset", "version"],
            ["versions.dataset", "versions.version"],
            name="fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("asset_id"),
        sa.UniqueConstraint("asset_uri", name="uq_asset_uri"),
    )
    op.create_table(
        "tasks",
        sa.Column("task_id", postgresql.UUID(), nullable=False),
        sa.Column("asset_id", postgresql.UUID(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column(
            "change_log",
            postgresql.ARRAY(postgresql.JSONB(astext_type=sa.Text())),
            nullable=True,
        ),
        sa.Column(
            "created_on", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "updated_on", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["asset_id"],
            ["assets.asset_id"],
            name="fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("task_id"),
    )

    op.execute(
        """
        CREATE TRIGGER latest_version
            BEFORE INSERT OR UPDATE
            ON public.versions
            FOR EACH ROW
            EXECUTE PROCEDURE public.reset_latest();
        """
    )

    op.execute(
        """
        ALTER TABLE
            public.userareas
            INHERIT geostore
        """
    )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("tasks")
    op.drop_table("assets")
    op.drop_table("versions")
    op.drop_index("userarea_gfw_geostore_id_idx", table_name="userareas")
    op.drop_table("userareas")

    # Delete all geostore tables in dataset schemas
    conn = op.get_bind()
    res = conn.execute("SELECT dataset FROM public.datasets")
    rows = res.fetchall()
    for row in rows:
        op.execute(f"""DROP SCHEMA IF EXISTS {row.dataset} CASCADE;""")

    op.drop_index("geostore_gfw_geostore_id_idx", table_name="geostore")
    op.drop_table("geostore")
    op.drop_table("datasets")
    # ### end Alembic commands ###
